// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NetGuruProject.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RegisterNewUser")]
    public partial class RegisterNewUserFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "RegisterNewUser.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "RegisterNewUser", "\tIn order access an accout\r\n\tI have to register an user first", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("RegisterNewUser")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("testraduF3@someemail.com", "Radu", "Nicolae", "202-555-0187", "Sanpetru, Lunii 2", "testpassword123", "Radu", "Nicolae", "Brasov", "12345", null)]
        public virtual void RegisterNewUser(string userEmailValue, string userFirstNameValue, string userLastNameValue, string userPhoneValue, string userAddressValue, string userPasswordValue, string userAddressFirstNameValue, string userAddressLastNameValue, string userCityValue, string userPostalCodeValue, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userEmailValue", userEmailValue);
            argumentsOfScenario.Add("userFirstNameValue", userFirstNameValue);
            argumentsOfScenario.Add("userLastNameValue", userLastNameValue);
            argumentsOfScenario.Add("userPhoneValue", userPhoneValue);
            argumentsOfScenario.Add("userAddressValue", userAddressValue);
            argumentsOfScenario.Add("userPasswordValue", userPasswordValue);
            argumentsOfScenario.Add("userAddressFirstNameValue", userAddressFirstNameValue);
            argumentsOfScenario.Add("userAddressLastNameValue", userAddressLastNameValue);
            argumentsOfScenario.Add("userCityValue", userCityValue);
            argumentsOfScenario.Add("userPostalCodeValue", userPostalCodeValue);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RegisterNewUser", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("I navigate to website and click login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "userEmail"});
                table2.AddRow(new string[] {
                            string.Format("{0}", userEmailValue)});
#line 8
 testRunner.Then("I fill desired email", ((string)(null)), table2, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "userFirstName",
                            "userLastName",
                            "userPhone",
                            "userAddress",
                            "userPassword",
                            "userAddressFirstName",
                            "userAddressLastName",
                            "userCity",
                            "userPostalCode"});
                table3.AddRow(new string[] {
                            string.Format("{0}", userFirstNameValue),
                            string.Format("{0}", userLastNameValue),
                            string.Format("{0}", userPhoneValue),
                            string.Format("{0}", userAddressValue),
                            string.Format("{0}", userPasswordValue),
                            string.Format("{0}", userAddressFirstNameValue),
                            string.Format("{0}", userAddressLastNameValue),
                            string.Format("{0}", userCityValue),
                            string.Format("{0}", userPostalCodeValue)});
#line 11
 testRunner.When("I fill the register form with following data", ((string)(null)), table3, "When ");
#line hidden
#line 14
 testRunner.And("I click the register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.Then("I am successfully logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
